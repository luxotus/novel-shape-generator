!function(e){var t={};function r(i){if(t[i])return t[i].exports;var o=t[i]={i:i,l:!1,exports:{}};return e[i].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,i){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(r.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(i,o,function(t){return e[t]}.bind(null,o));return i},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t);const i=new THREE.Scene,o=new THREE.Clock,s=window.innerWidth/window.innerHeight,n=new THREE.PerspectiveCamera(45,s,.1,1e4),a=new THREE.PointLight(10066329),l=new THREE.AmbientLight(5592405),d=new THREE.WebGLRenderer,h=new class{constructor(e,t){this.details=e,this.shapes=void 0!==t?t:[],this.typeExits=this.constructor.isRadiusOnly(this.details.type)||this.isGeometryOnly(this.details.type),this.typeExits||(this.details.type=this.constructor.randomShapeType()),this.createShape()}static randomShapeType(){const e=["Dodecahedron","Icosahedron","Octahedron","Tetrahedron","Box","Circle","Cone","Cylinder","Plane","Ring","Sphere","Torus","TorusKnot"];return e[Math.floor(Math.random()*e.length)]}static isRadiusOnly(e){return["Dodecahedron","Icosahedron","Octahedron","Tetrahedron"].includes(e)}static geometrySideLengths(e){return{Box:3,Circle:2,Cone:3,Cylinder:4,Plane:3,Ring:3,Sphere:3,Torus:4,TorusKnot:4}[e]}fillGeometry(e,t){const r=this.constructor.geometrySideLengths(this.details.type);let i=this.details.geometry.length>0?this.details.geometry:[];if(r>this.details.geometry.length){const o=r-this.details.geometry.length,s=Array(o).fill(0).map(()=>Math.floor(Math.random()*(e-t))+t);i=i.concat(s)}return i}isGeometryOnly(e){return void 0!==this.constructor.geometrySideLengths(e)}createShape(){const e={};if(this.details.materialCreator.updateFlatShape(this.details.type),e.material=new THREE.MeshLambertMaterial(this.details.materialCreator.material),this.constructor.isRadiusOnly(this.details.type)&&(e.geometry=new THREE[`${this.details.type}BufferGeometry`](this.details.radius)),this.isGeometryOnly(this.details.type)){const t=this.constructor.geometrySideLengths(this.details.type)!==this.details.geometry.length?this.fillGeometry(this.details.size.max,this.details.size.min):this.details.geometry;e.geometry=new THREE[`${this.details.type}BufferGeometry`](...t)}void 0!==e.geometry&&(e.mesh=new THREE.Mesh(e.geometry,e.material),this.shapes.push(e))}}({type:"",geometry:[],materialCreator:new class{constructor(e,t){this.material={},Object.keys(t).forEach(e=>{this.constructor.supportedMaterialProps(e)&&(this.material[e]=t[e])}),e&&this.randomizeColor()}static isFlat(e){return["Plane","Circle","Ring"].includes(e)}updateFlatShape(e){this.constructor.isFlat(e)&&(this.material.side=THREE.DoubleSide)}static supportedMaterialProps(e){return["color"].includes(e)}randomizeColor(){this.material.color=16777215*Math.random()<<0}}(!0,{color:65535}),size:{max:100,min:10},radius:100});n.position.y=160,n.position.z=400,i.add(n),a.position.set(0,300,200),i.add(a),i.add(l),d.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(d.domElement),i.add(h.shapes[0].mesh),n.lookAt(h.shapes[0].mesh.position),function e(){requestAnimationFrame(e),h.shapes[0].mesh.rotation.x-=.01,h.shapes[0].mesh.rotation.y-=o.getDelta(),d.render(i,n)}()}]);