!function(e){var t={};function i(r){if(t[r])return t[r].exports;var n=t[r]={i:r,l:!1,exports:{}};return e[r].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=t,i.d=function(e,t,r){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(i.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(r,n,function(t){return e[t]}.bind(null,n));return r},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}([function(e,t,i){"use strict";i.r(t);class r{constructor(e){this.details=e,this.typeExits=this.constructor.isRadiusOnly(this.details.type)||this.isGeometryOnly(this.details.type),this.typeExits||(this.details.type=this.constructor.randomShapeType()),this.createShape()}static randomShapeType(){const e=["Dodecahedron","Icosahedron","Octahedron","Tetrahedron","Box","Circle","Cone","Cylinder","Plane","Ring","Sphere","Torus","TorusKnot"];return e[Math.floor(Math.random()*e.length)]}static isRadiusOnly(e){return["Dodecahedron","Icosahedron","Octahedron","Tetrahedron"].includes(e)}static geometrySideLengths(e){return{Box:3,Circle:2,Cone:3,Cylinder:4,Plane:4,Ring:3,Sphere:3,Torus:4,TorusKnot:4}[e]}fillGeometry(e,t){const i=this.constructor.geometrySideLengths(this.details.type);let r=this.details.geometry.length>0?this.details.geometry:[];if(i>this.details.geometry.length){const n=i-this.details.geometry.length,o=Array(n).fill(0).map(()=>Math.floor(Math.random()*(e-t))+t);r=r.concat(o)}return r}isGeometryOnly(e){return void 0!==this.constructor.geometrySideLengths(e)}createShape(){const e={};if(this.details.materialCreator.updateFlatShape(this.details.type),e.material=this.details.materialCreator.meshMaterial,this.constructor.isRadiusOnly(this.details.type)&&(e.geometry=new THREE[`${this.details.type}BufferGeometry`](this.details.radius)),this.isGeometryOnly(this.details.type)){const t=this.constructor.geometrySideLengths(this.details.type)!==this.details.geometry.length?this.fillGeometry(this.details.size.max,this.details.size.min):this.details.geometry;e.geometry=new THREE[`${this.details.type}BufferGeometry`](...t)}void 0!==e.geometry&&(e.mesh=new THREE.Mesh(e.geometry,e.material),this.shape=e.mesh)}}class n{constructor(e,t,i){this.material={},this.type=i,this.knownTypes=["Basic","Lambert","Normal","Phong","Physical","Standard"],Object.keys(t).forEach(e=>{this.constructor.supportedMaterialProps(e)&&(this.material[e]=t[e])}),e?(this.randomizeColor(),this.randomizeType()):this.hasKnownType(i)||this.randomizeType()}get meshMaterial(){return new THREE[`Mesh${this.type}Material`](this.material)}static isFlat(e){return["Plane","Circle","Ring"].includes(e)}static supportedMaterialProps(e){return["color","transparent","opacity","uniforms"].includes(e)}addWireFrame(){this.material.wireframe=!0,this.material.wireframeLineWidth=5,this.material.wireframeLineJoin="round",this.material.wireframeLineCap="round"}addTransparency(){this.material.transparent=!0,this.material.opacity=.5}addEmissive(){this.material.emissive=16711680,this.material.emissiveIntensity=.2}addTexture(){this.map=(new THREE.TextureLoader).load("./textures/4.jpg")}hasKnownType(e){return this.knownTypes.includes(e)}updateFlatShape(e){this.constructor.isFlat(e)&&(this.material.side=THREE.DoubleSide)}randomizeColor(){this.material.color=16777215*Math.random()<<0}randomizeType(){this.type=this.knownTypes[Math.floor(Math.random()*this.knownTypes.length)]}}const o=new THREE.Scene,a=new THREE.Clock,s=window.innerWidth/window.innerHeight,l=new THREE.PerspectiveCamera(35,s,300,1e4),d=new THREE.PointLight(16777215,.5),h=new THREE.AmbientLight(16777215,.5),c=new THREE.WebGLRenderer,m={model:{type:"",geometry:[],materialCreator:new n(!0,{color:65535},"Basic"),size:{max:100,min:50},radius:100},ground:{type:"Plane",geometry:[1e4,1e4,100,100],materialCreator:new n(!1,{color:15990754},"Lambert")}},u=new r(m.model).shape,p=new r(m.ground).shape;l.position.y=160,l.position.z=400,o.add(l),d.position.set(0,300,200),o.add(d),o.add(h),c.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(c.domElement),u.position.z=-1e3,u.position.x=-100,o.add(u),l.lookAt(u.position),p.rotation.x=-90*Math.PI/180,p.position.y=-150,o.add(p),function e(){requestAnimationFrame(e),u.rotation.x-=.02,u.rotation.y-=a.getDelta(),u.rotation.z+=.02,c.render(o,l)}()}]);